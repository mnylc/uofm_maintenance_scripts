<?php
/**
 * @file
 * Contains hooks and functions
 */

/**
 * Fix tiffs queue
 */
define('UOFM_MAINTENANCE_FIX_TIFFS_QUEUE', 'uofm_maintenance_fix_tiff_mimetype');
define('UOFM_MAINTENANCE_FIX_TIFFS_TIMER', UOFM_MAINTENANCE_FIX_TIFFS_QUEUE);

/**
 * Regenerate JP2 datastream queue and timer
 */
define('UOFM_MAINTENANCE_REGEN_JP2_QUEUE', 'uofm_maintenance_regenerate_jp2');
define('UOFM_MAINTENANCE_REGEN_JP2_TIMER', UOFM_MAINTENANCE_REGEN_JP2_QUEUE);

/**
 * Batch index queue
 */
define('UOFM_MAINTENANCE_BATCH_INDEX_QUEUE', 'uofm_maintenance_batch_reindex');

/**
 * Derivative Fixer queue and timer.
 */
define('UOFM_MAINTENANCE_DERIVATIVE_FIXER_QUEUE', 'uofm_maintenance_derivative_fixer');
define('UOFM_MAINTENANCE_DERIVATIVE_FIXER_TIMER', UOFM_MAINTENANCE_DERIVATIVE_FIXER_QUEUE);

/**
 * Update parent queue.
 */
define('UOFM_MAINTENANCE_UPDATE_PARENT_QUEUE', 'uofm_maintenance_update_parent');

/**
 * Propogate XACML.
 */
define('UOFM_MAINTENANCE_COPY_XACML_QUEUE', 'uofm_maintenance_copy_xacml');

/**
 * Implements hook_cron_queue_info().
 *
 * We re-index objects using the cron runs.
 */
function uofm_maintenance_cron_queue_info() {
  $queues[UOFM_MAINTENANCE_BATCH_INDEX_QUEUE] = array(
    'worker callback' => 'uofm_maintenance_batch_index_worker',
    'time' => 180,
  );
  return $queues;
}

/**
 * Correct any incorrect image/tiff mimetypes.
 *
 * @param string|AbstractObject $object
 *   the string PID or a Fedora Object
 */
function uofm_maintenance_fix_tiff_worker($object) {
  $obj = FALSE;
  if (is_string($object)) {
    module_load_include('inc', 'islandora', 'includes/utilities');
    if (islandora_is_valid_pid($object)) {
      $obj = islandora_object_load($object);
    }
  }
  if (is_a($object, 'AbstractObject')) {
    $obj = $object;
  }
  if (isset($obj['OBJ']) && $obj['OBJ']->mimetype == "image/tif") {
    $obj['OBJ']->mimetype = "image/tiff";
  }
  if (isset($obj['TIFF']) && $obj['TIFF']->mimetype == "image/tif") {
    $obj['TIFF']->mimetype = "image/tiff";
  }
  return TRUE;
}

/**
 * Regenerate JP2 derivative from OBJ/TIFF.
 *
 * @param string|AbstractObject $object
 *   the string PID or a Fedora Object
 */
function uofm_maintenance_regen_jp2_worker($object) {
  $obj = FALSE;
  if (is_string($object)) {
    module_load_include('inc', 'islandora', 'includes/utilities');
    if (islandora_is_valid_pid($object)) {
      $obj = islandora_object_load($object);
    }
  }
  if (is_a($object, 'AbstractObject')) {
    $obj = $object;
  }
  if (isset($obj['OBJ']) || isset($obj['TIFF'])) {
    if ((isset($obj['OBJ']) && isset($obj['JP2']) && ($obj['OBJ']->size * 0.001) > $obj['JP2']->size) ||
      (isset($obj['TIFF']) && isset($obj['JP2']) && ($obj['TIFF']->size * 0.001) > $obj['JP2']->size)) {
      module_load_include('inc', 'islandora_large_image', 'includes/derivatives');
      drush_log("Regenerate JP2 for " . $obj->id, "ok");
      islandora_large_image_create_jp2_derivative($obj);
    }
  }
  return TRUE;
}

/**
 * Generate any missing derivatives.
 *
 * @param string|AbstractObject $object
 *   the string PID or a Fedora Object
 */
function uofm_maintenance_derivative_fixer_worker($object) {
  $obj = FALSE;
  if (is_string($object)) {
    module_load_include('inc', 'islandora', 'includes/utilities');
    if (islandora_is_valid_pid($object)) {
      $obj = islandora_object_load($object);
    }
  }
  if (is_a($object, 'AbstractObject')) {
    $obj = $object;
  }
  if ($obj) {
    module_load_include('inc', 'islandora', 'includes/derivatives');
    islandora_do_derivatives($obj, array('force' => FALSE));
    return TRUE;
  }
  return FALSE;
}

/**
 * Initiate a re-index of the object.
 *
 * @param string|AbstractObject $object
 *   the string PID or a Fedora Object
 */
function uofm_maintenance_batch_index_worker($object) {
  $obj = FALSE;
  if (is_string($object)) {
    module_load_include('inc', 'islandora', 'includes/utilities');
    if (islandora_is_valid_pid($object)) {
      $obj = islandora_object_load($object);
    }
  }
  if (is_a($object, 'AbstractObject')) {
    $obj = $object;
  }
  if ($obj) {
    $url = variable_get('islandora_collection_search_gsearch_endpoint', 'http://localhost:8080/fedoragsearch/rest');
    $user = variable_get('islandora_collection_search_gsearch_user', NULL);
    $passwd = variable_get('islandora_collection_search_gsearch_password', NULL);
    $ch = curl_init();
    $params = array(
      "operation" => "updateIndex",
      "action" => "fromPid",
      "value" => $object,
    );
    curl_setopt($ch, CURLOPT_URL, $url . "?" . http_build_query($params));
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_HEADER, 0);
    curl_setopt($ch, CURLOPT_USERPWD, "$user:$passwd");
    $res = curl_exec($ch);
    curl_close($ch);

    if ($res === FALSE) {
      watchdog('uofm_maintenance', 'Error re-indexing @o', array('@o' => $object));
    }
  }
}

/**
 * Replace/add a parent to the object.
 *
 * @param array $data
 *   array with keys:
 *
 *   'pid' => pid to act on,
 *   'relation_uri' => relation URI to use,
 *   'relation_pred' => relation predicate to use,
 *   'old_parent' => parent to replace (if exists),
 *   'new_parent' => parent to add,
 *   'update_xacml' => copy POLICY from the new parent,
 */
function uofm_maintenance_update_parent_worker($data) {
  $key_template = array(
    'pid' => 'test',
    'relation_uri' => 'test',
    'relation_pred' => 'test',
    'new_parent' => 'test',
    'update_xacml' => TRUE,
  );
  if (count(array_intersect_key($data, $key_template)) != 5) {
    drush_log("Invalid array passed to the update_parent_worker", "error");
    return FALSE;
  }
  $pid = $data['pid'];
  if (is_string($pid)) {
    module_load_include('inc', 'islandora', 'includes/utilities');
    if (islandora_is_valid_pid($pid)) {
        $object = islandora_object_load($pid);
    }
  }
  if (!is_a($object, 'AbstractObject')) {
    drush_log("Did not load object properly in update_parent_worker", "error");
    return FALSE;
  }
  $new_parent = $data['new_parent'];
  if (!(strpos($new_parent, "info:fedora/") == 0)) {
    $new_parent = "info:fedora/$new_parent";
  }

  if (isset($data['old_parent'])) {
    $old_parent = $data['old_parent'];
    if (!(strpos($old_parent, "info:fedora/") == 0)) {
      $old_parent = "info:fedora/$old_parent";
    }
    if (count($object->relationships->get($data['relation_uri'], $data['relation_pred'])) > 0) {
      $object->relationships->remove($data['relation_uri'], $data['relation_pred'], $old_parent);
    }
  }
  $object->relationships->add($data['relation_uri'], $data['relation_pred'], $new_parent);
  $result = TRUE;
  if (module_exists('islandora_xacml_editor') && $data['update_xacml']) {
    $result = uofm_maintenance_update_xacml_worker(array('from' => $data['new_parent'], 'to' => $pid));
  }
  return $result;
}

/**
 * XACML queue custom builder.
 *
 * @param string $pid
 *   the PID for this action.
 */
function uofm_maintenance_copy_xacml_custom_queue($pid) {
  $from = drush_get_option('from_pid', NULL);
  if (is_null($from)) {
    drush_set_error("--from_pid must be set.");
  }
  return array('to' => $pid, 'from' => $from);
}

/**
 * Copies XACML policy from one object to another.
 *
 * @param array $data
 *   array with keys ('from' and 'to') and values as the objects or PIDs.
 * @return bool
 *   Was it successful.
 */
function uofm_maintenance_update_xacml_worker($data) {
  if (!module_exists('islandora_xacml_editor')) {
    return FALSE;
  }
  if (!is_array($data) || !array_key_exists('from', $data) || !array_key_exists('to', $data)) {
    return FALSE;
  }
  $from = $data['from'];
  $to = $data['to'];
  $loader = function($object) {
    if (is_string($object)) {
      module_load_include('inc', 'islandora', 'includes/utilities');
      if (islandora_is_valid_pid($object)) {
        return islandora_object_load($object);
      }
    }
    if (is_a($object, 'AbstractObject')) {
      return $object;
    }
  };
  $from_obj = $loader($from);
  if (!isset($from_obj['POLICY'])) {
    return FALSE;
  }
  module_load_include('inc', 'islandora_xacml_editor', 'includes/batch');
  $to_obj = $loader($to);
  $xml = $from_obj['POLICY']->content;
  $policy_update = new IslandoraUpdatePolicy($to_obj->id, $xml);
  $success = $policy_update->updatePolicy();
  return $success;
}
