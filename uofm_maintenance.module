<?php
/**
 * @file
 * Contains hooks and functions
 */

/**
 * Fix tiffs queue
 */
define('UOFM_MAINTENANCE_FIX_TIFFS_QUEUE', 'uofm_maintenance_fix_tiff_mimetype');
define('UOFM_MAINTENANCE_FIX_TIFFS_TIMER', UOFM_MAINTENANCE_FIX_TIFFS_QUEUE);

/**
 * Regenerate JP2 datastream queue and timer
 */
define('UOFM_MAINTENANCE_REGEN_JP2_QUEUE', 'uofm_maintenance_regenerate_jp2');
define('UOFM_MAINTENANCE_REGEN_JP2_TIMER', UOFM_MAINTENANCE_REGEN_JP2_QUEUE);

/**
 * Batch index queue
 */
define('UOFM_MAINTENANCE_BATCH_INDEX_QUEUE', 'uofm_maintenance_batch_reindex');

/**
 * Derivative Fixer queue and timer.
 */
define('UOFM_MAINTENANCE_DERIVATIVE_FIXER_QUEUE', 'uofm_maintenance_derivative_fixer');
define('UOFM_MAINTENANCE_DERIVATIVE_FIXER_TIMER', UOFM_MAINTENANCE_DERIVATIVE_FIXER_QUEUE);

/**
 * Implements hook_cron_queue_info().
 *
 * We re-index objects using the cron runs.
 */
function uofm_maintenance_cron_queue_info() {
  $queues[UOFM_MAINTENANCE_BATCH_INDEX_QUEUE] = array(
    'worker callback' => 'uofm_mainteance_batch_index_worker',
    'time' => 180,
  );
  return $queues;
}

/**
 * Correct any incorrect image/tiff mimetypes
 *
 * @param string|AbstractObject $object
 *   the string PID or a Fedora Object
 */
function uofm_maintenance_fix_tiff_worker($object) {
  $obj = FALSE;
  if (is_string($object)) {
    module_load_include('inc', 'islandora', 'includes/utilities');
    if (islandora_is_valid_pid($object)) {
      $obj = islandora_object_load($object);
    }
  }
  if (is_a($object, 'AbstractObject')) {
    $obj = $object;
  }
  if (isset($obj['OBJ']) && $obj['OBJ']->mimetype == "image/tif") {
    $obj['OBJ']->mimetype = "image/tiff";
  }
  if (isset($obj['TIFF']) && $obj['TIFF']->mimetype == "image/tif") {
    $obj['TIFF']->mimetype = "image/tiff";
  }
  return TRUE;
}

/**
 * Regenerate JP2 derivative from OBJ/TIFF.
 *
 * @param string|AbstractObject $object
 *   the string PID or a Fedora Object
 */
function uofm_maintenance_regen_jp2_worker($object) {
  $obj = FALSE;
  if (is_string($object)) {
    module_load_include('inc', 'islandora', 'includes/utilities');
    if (islandora_is_valid_pid($object)) {
      $obj = islandora_object_load($object);
    }
  }
  if (is_a($object, 'AbstractObject')) {
    $obj = $object;
  }
  if (isset($obj['OBJ']) || isset($obj['TIFF'])) {
    if ((isset($obj['OBJ']) && isset($obj['JP2']) && ($obj['OBJ']->size * 0.01) > $obj['JP2']->size) ||
      (isset($obj['TIFF']) && isset($obj['JP2']) && ($obj['TIFF']->size * 0.01) > $obj['JP2']->size)) {
      module_load_include('inc', 'islandora_large_image', 'includes/derivatives.inc');
      islandora_large_image_create_jp2_derivative($obj);
    }
  }
  return TRUE;
}

/**
 * Generate any missing derivatives.
 *
 * @param string|AbstractObject $object
 *   the string PID or a Fedora Object
 */
function uofm_maintenance_derivative_fixer_worker($object) {
  $obj = FALSE;
  if (is_string($object)) {
    module_load_include('inc', 'islandora', 'includes/utilities');
    if (islandora_is_valid_pid($object)) {
      $obj = islandora_object_load($object);
    }
  }
  if (is_a($object, 'AbstractObject')) {
    $obj = $object;
  }
  if ($obj) {
    module_load_include('inc', 'islandora', 'includes/derivatives');
    islandora_do_derivatives($obj, array('force' => FALSE));
  }
}

/**
 * Initiate a re-index of the object.
 *
 * @param string|AbstractObject $object
 *   the string PID or a Fedora Object
 */
function uofm_maintenance_batch_index_worker($object) {
  $obj = FALSE;
  if (is_string($object)) {
    module_load_include('inc', 'islandora', 'includes/utilities');
    if (islandora_is_valid_pid($object)) {
      $obj = islandora_object_load($object);
    }
  }
  if (is_a($object, 'AbstractObject')) {
    $obj = $object;
  }
  if ($obj) {
    $url = variable_get('islandora_collection_search_gsearch_endpoint', 'http://localhost:8080/fedoragsearch/rest');
    $user = variable_get('islandora_collection_search_gsearch_user', NULL);
    $passwd = variable_get('islandora_collection_search_gsearch_password', NULL);
    $ch = curl_init();
    $params = array(
      "operation" => "updateIndex",
      "action" => "fromPid",
      "value" => $object,
    );
    curl_setopt($ch, CURLOPT_URL, $url . "?" . http_build_query($params));
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_HEADER, 0);
    curl_setopt($ch, CURLOPT_USERPWD, "$user:$passwd");
    $res = curl_exec($ch);
    curl_close($ch);

    if ($res === FALSE) {
      watchdog('uofm_maintenance', 'Error re-indexing @o', array('@o' => $object));
    }
  }
}
